# Тестовое задание для трудоустройства

Это тестовое задание для кандидатов, претендующих на позицию разработчика. Цель задания — продемонстрировать ваши навыки разработки веб-приложений с использованием Django, Django REST Framework, Celery и Memcached. Задание предполагает создание системы управления заказами в онлайн-магазине с REST API, асинхронной обработкой задач и кэшированием данных.

## Срок выполнения
- **Срок сдачи**: 14 дней с момента получения задания.
- Вы можете сдать задание раньше, но это не повлияет на процесс оценки. Мы ценим качество выполнения, а не скорость.

## Использование ИИ
- Допускается использование инструментов искусственного интеллекта (например, для генерации кода или идей), но мы настоятельно рекомендуем выполнять задание самостоятельно. На техническом собеседовании вам предстоит объяснить каждую часть кода и принятые архитектурные решения, поэтому глубокое понимание проекта крайне важно.

## Требования к выполнению

### Технологический стек
- **Django**: Версия 4.x или выше. Используйте Django REST Framework (DRF) для API.
- **База данных**: PostgreSQL (рекомендуется для продакшена, SQLite допустим для разработки).
- **Celery**: Для асинхронных задач. Используйте Redis как брокер сообщений и бэкенд для результатов задач.
- **Memcached**: Для кэширования (используйте `pylibmc` или `python-memcached`).
- **Дополнительно**:
  - Docker и Docker Compose для контейнеризации (Django, Celery worker, Redis, Memcached, PostgreSQL).
  - Тестирование: pytest или встроенные тесты Django.
  - Аутентификация: JWT (`djangorestframework-simplejwt`).
  - Документация API: Swagger/Redoc через DRF.

### Модели
1. **User**: Расширьте встроенную модель пользователя Django.
2. **Product**:
   - Поля: `name` (str), `description` (text), `price` (decimal), `stock` (int), `category` (str, choices: 'electronics', 'clothing', 'books' и др.).
3. **Order**:
   - Поля: `user` (ForeignKey to User), `products` (ManyToManyField to Product с through-моделью), `total_price` (decimal, вычисляемое), `status` (str, choices: 'pending', 'processing', 'shipped', 'delivered', 'cancelled'), `created_at` (datetime).
4. **OrderItem** (through-модель):
   - Поля: `order` (ForeignKey), `product` (ForeignKey), `quantity` (int), `price_at_purchase` (decimal).

### Функциональные требования
1. **REST API** (используйте DRF ViewSets или APIViews):
   - **Аутентификация** (JWT для всех эндпоинтов, кроме регистрации и логина):
     - `/api/auth/register/` (POST): Создание пользователя (email, password, username).
     - `/api/auth/login/` (POST): Получение JWT-токена.
   - **Продукты**:
     - `/api/products/` (GET: список с пагинацией и фильтрами по category/price, POST: создание, админ).
     - `/api/products/<id>/` (GET: детали, PUT/PATCH: обновление, DELETE: удаление, админ).
   - **Заказы**:
     - `/api/orders/` (GET: список заказов пользователя, POST: создание заказа с проверкой stock и транзакциями).
     - `/api/orders/<id>/` (GET: детали, PATCH: обновление статуса, админ/владелец).
     - При создании заказа: рассчитайте `total_price`, верните ошибку 400 при недостаточном stock.
   - **Админские эндпоинты**:
     - `/api/admin/orders/` (GET: все заказы с фильтрами по status/user).

2. **Celery**:
   - При создании заказа: асинхронная задача для генерации PDF-отчета (используйте `reportlab`) и симуляции отправки email (лог или запись в БД).
   - При обновлении статуса на 'shipped': задача для симуляции вызова внешнего API (например, jsonplaceholder.typicode.com) с retry (max_retries=3).
   - Настройте Celery с Redis, логируйте выполнение задач.

3. **Memcached**:
   - Настройте Django cache с Memcached (`CACHES` в settings.py).
   - Кэшируйте список продуктов (`/api/products/`, 5 минут) и детали заказа (`/api/orders/<id>/`, 1 минута).
   - Очищайте кэш при обновлении продуктов/заказов (используйте signals или post_save).

4. **Дополнительно**:
   - **Concurrency**: Используйте `select_for_update()` для атомарного обновления stock.
   - **Валидация**: Кастомные валидаторы в сериализаторах (положительное quantity, минимальная сумма заказа).
   - **Тесты**: Unit-тесты для моделей, API, Celery tasks, cache (hit/miss).
   - **Документация**: Swagger/Redoc для API.


### Инструкции по сдаче
- Загрузите код в публичный репозиторий на GitHub.
- В README укажите:
  - Инструкции по установке и запуску (`docker-compose up`).
  - Примеры curl-запросов для всех эндпоинтов.
  - Описание архитектуры и принятых решений.
- Приложите скриншоты/логи работы Celery и Memcached.
- Укажите, если задание выполнено частично.

### Критерии оценки
- Корректность реализации API, моделей, Celery, Memcached.
- Качество кода: тесты (80%+ покрытие), обработка ошибок, чистота.
- Полнота выполнения всех требований.
- Работоспособность приложения в Docker.